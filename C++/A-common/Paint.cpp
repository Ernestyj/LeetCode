
/**小球染色问题总结
 * 有一串长度为N的小球排成一排，要求将他们全部染色，共有k种颜色，但是不能出现连续三个及以上相同颜色的珠子。输入长度N和颜色种类K，求所有染色的方法总数。
 * 输入示例：2,3
输出示例：9
输入示例：3,2
输出示例：6
 */
//排列问题暴力破解的时间复杂度为O(k^n)。
//可以考虑DP，因为第i个小球的颜色只受i-1和i-2小球颜色的影响。用dp[i-2]表示当染色到i-2个球时，所有的染色方法总数.
//若将i-1和i染成同样的颜色，那么i和i-1有k-1种染色方法，因为只需和i-2不同即可。此种情况下，染色总方法数为（i和i-1的染色方法数）*（前i-2的染色方法总数） 即：（k-1）*dp[i-2];
//若将i-1和i染成不同的颜色， 那么i的颜色选择和i-2无关，此时i仍然有k-1种颜色选择。此种情况下，染色总方法数为（i的染色方法数）*（前i-1的染色方法总数）即：（k-1）*dp[i-1];
//综合两种情况，dp[i]=（k-1）*dp[i-2] + （k-1）*dp[i-1];
//当k=2时，退化为dp[i] = dp[i-2] + dp[i-1];
int numWays(int n, int k) {
    if(n<=0) return 0;
    if(n==1) return k;
    if(n==2) return k*k;
    vector<int> dp(n, 0);
    dp[0] = k;
    dp[1] = k*k;
    for(int i = 2; i < n; i++) {
        dp[i] = dp[i-1]*(k-1) + dp[i-2]*(k-1);
    }
    return dp[n-1];
}
